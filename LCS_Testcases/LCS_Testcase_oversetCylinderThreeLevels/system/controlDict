/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | foam-extend: Open Source CFD                    |
|  \\    /   O peration     | Version:     4.1                                |
|   \\  /    A nd           | Web:         http://www.foam-extend.org         |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      controlDict;
}

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

application icoOversetFoam;

// startFrom       startTime;
startFrom       latestTime;

startTime       0;

stopAt          endTime;

endTime         100;

deltaT          0.02;

writeControl    runTime;

writeInterval   2;

purgeWrite      0;

writeFormat     ascii;

writePrecision  6;

writeCompression uncompressed;

timeFormat      general;

timePrecision   6;

runTimeModifiable yes;

libs
(
    "libfoam.so"
    "libmeshTools.so"
    "libsurfMesh.so"
    "libsampling.so"
    "libdynamicMesh.so"
    "liboversetMesh.so"
    "liblduSolvers.so"
);



functions
(
    /*
    forces
    {
        type                forces;
        functionObjectLibs  ( "libforces.so" );
        outputControl       timeStep;
        outputInterval      1;
        patches             ( cylinder );
        pName               p;
        UName               U;
        rhoName             rhoInf;
        log                 true;
        rhoInf              1;
        CofR                (0 0 0);
    }

    probes
    {
        type            probes;
        functionObjectLibs ("libsampling.so");
        enabled         true;
        outputControl   timeStep;
        outputInterval  1;
        probeLocations
        (
            ( 1 0 0 )
            ( 3 0 0 )
            ( 5 0 0 )
            (15 0 0 )
        );

        fields
        (
            p
        );
    }*/

    lagrangianCoherentStructures
    {
        type            LCS;
        // Where to load it from (if not already in solver)
        functionObjectLibs ("libLCSFunctionObject.so");

        // Specifies if an oversetMesh is used for the simulation  - (default: startTime of simulation)
        isOverset true;
        // Name of cellZone in oversetMesh which is used for the lcs computation
        // (only needed if isOverset is true)
        lcsOversetRegion "refine";

        // Specifies if the main mesh is a static rectlinear Mesh 
        // (if yes the main cfd mesh is also used for the lcs computations)
        // (if not a rectlinear LCS blockMesh has to be created under constant/LCS/polyMesh beforehand)
        // (MUST be true if isOverset is true)
        isStaticRectLinear true;

        // Numer of cells in x, y and z direction (must correspond with mesh which is used for the lcs compuatations)
        n (70 70 1);

        // Velocity field name
        velocityName "U";

        // Start time of LCS diagnostic - (default: startTime of simulation)
        lcsStartTime 0;

        // End time of LCS diagnostic - (default: endTime of simulation)
        lcsEndTime 100;

        // LCS output interval in s
        lcsWriteTimeIntervall 2;

        // Switches for FTLE field evaluation 
        // - Forward time (repelling) FTLE field - (default: true/on)
        ftleFwd    on;
        // - Backward time (attracting) FTLE field - (default: false/off)
        ftleBkwd   on;

        // Specifies addition or removal of grid points for the diagnostic calculation
        // - 0 LCS diagnostic will be computed on same grid (is default)
        // - 1, 2, ... Diagnostic will be computed on a grid with resolution times more grid points
        // - -1, -2, ... Diagnostic will be computed on a grid with resolution times less grid points
        resolution 0;

        lcsCFL          0.5;

        integrator      rk3;

        interpolator    linear;
        
        // LCS Options
        lcsOptions
        {
            synctimer       off;
            debug           off;
            writeFlowmap    on;
            writeBCFlags    on;
            incompressible  on;
            auxGrid         off;
        }
    }
);


// ************************************************************************* //
